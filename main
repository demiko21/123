OOPEQ1 - Build the expression
Given a sequence of digits, insert the character = (equality sign) and two operators: + (plus) and - (minus) so as to form an equality of two arithmetic expressions.

Rules:

Do not rearrange the given sequence of digits.
Place in between every two consecutive digits in the sequence exactly one of the symbols: plus, minus, or equality sign.
Use the equality sign exactly once.
If there is more than one solution, find all of them. If there are no solutions for the case, do not write anything.

Input
First, you are given T, the number of test cases (T â‰¤ 10000). The test cases follow, one test per line. Each of the test cases consists of a sequence of digits. There are at least 2 and no more than 10 digits in the sequence. Digits are separated by spaces.

Output
For each of the test cases print all requested equalities, one per line, in arbitrary order.

Example
Input:
5
2 3
1 0 1 0
3 2 1
3 4
3 3

Output:
1=0+1-0
1=0+1+0
1-0=1-0
1-0=1+0
1+0=1-0
1+0=1+0
1-0-1=0
1+0-1=0
3=2+1
3-2=1
3=3
Scoring
There are five sets of tests:

Set 1 - two digits in every test case. (1 pt)
Set 2 - three digits in every test case. (1 pt)
Set 3 - up to five digits in every test case. (2 pts)
Set 4 - up to ten digits in every test case, output size does not exceed 300KB (2 pts)
Set 5 - up to ten digits in every test case, output size does not exceed 2.5MB (2 pts)




answear 
#include <iostream>
#include <vector>
#include <string>
using namespace std;

vector<string> generateEqualities(const vector<int>& digits) {
    vector<string> equalities;

    // Generate all possible combinations of operators
    for (int i = 0; i < (1 << (digits.size() - 1)); i++) {
        string equality;
        int sum = digits[0];

        for (int j = 0; j < digits.size() - 1; j++) {
            equality += to_string(digits[j]);

            if (i & (1 << j)) {
                equality += " + ";
                sum += digits[j + 1];
            } else {
                equality += " - ";
                sum -= digits[j + 1];
            }
        }

        equality += to_string(digits.back());
        if (sum == 0) {
            equalities.push_back(equality);
        }
    }

    return equalities;
}

int main() {
    int T;
    cin >> T;

    while (T--) {
        int n;
        cin >> n;
        vector<int> digits(n);

        for (int i = 0; i < n; i++) {
            cin >> digits[i];
        }

        vector<string> equalities = generateEqualities(digits);

        for (const auto& equality : equalities) {
            cout << equality << " = 0" << endl;
        }
    }

    return 0;
}
